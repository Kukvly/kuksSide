{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nexports.__esModule = true;\nexports[\"default\"] = resolveRewrites;\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\nvar _prepareDestination = _interopRequireDefault(require(\"./prepare-destination\"));\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nvar customRouteMatcher = (0, _pathMatch[\"default\"])(true);\nfunction resolveRewrites(asPath, pages, basePath, rewrites, query, resolveHref) {\n  if (!pages.includes(asPath)) {\n    var _iterator = _createForOfIteratorHelper(rewrites),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var rewrite = _step.value;\n        var matcher = customRouteMatcher(rewrite.source);\n        var params = matcher(asPath);\n        if (params) {\n          if (!rewrite.destination) {\n            // this is a proxied rewrite which isn't handled on the client\n            break;\n          }\n          var destRes = (0, _prepareDestination[\"default\"])(rewrite.destination, params, query, true, rewrite.basePath === false ? '' : basePath);\n          asPath = destRes.parsedDestination.pathname;\n          Object.assign(query, destRes.parsedDestination.query);\n          if (pages.includes((0, _normalizeTrailingSlash.removePathTrailingSlash)(asPath))) {\n            // check if we now match a page as this means we are done\n            // resolving the rewrites\n            break;\n          } // check if we match a dynamic-route, if so we break the rewrites chain\n          var resolvedHref = resolveHref(asPath);\n          if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n            break;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return asPath;\n}","map":{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","resolveRewrites","asPath","pages","basePath","rewrites","query","resolveHref","includes","rewrite","matcher","source","params","destination","destRes","parsedDestination","pathname","Object","assign","resolvedHref"],"mappings":";;;;;;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;;;;;AAEA,IAAMA,kBAAkB,GAAG,CAAA,CAAA,EAAA,UAAA,WAAA,EAAU,IAAV,CAA3B;AAEe,SAASC,eAAT,CACbC,MADa,EAEbC,KAFa,EAGbC,QAHa,EAIbC,QAJa,EAKbC,KALa,EAMbC,WANa,EAOb;EACA,IAAI,CAACJ,KAAK,CAACK,QAANL,CAAeD,MAAfC,CAAL,EAA6B;IAAA,IAAA,SAAA,GAAA,0BAAA,CACLE,QAAtB;MAAA,KAAA;IAAA;MAAA,KAAA,SAAA,CAAA,CAAA,MAAA,KAAA,GAAA,SAAA,CAAA,CAAA,IAAA,IAAA,GAAgC;QAAA,IAArBI,OAAX,GAAA,KAAA,CAAA,KAAA;QACE,IAAMC,OAAO,GAAGV,kBAAkB,CAACS,OAAO,CAACE,MAAT,CAAlC;QACA,IAAMC,MAAM,GAAGF,OAAO,CAACR,MAAD,CAAtB;QAEA,IAAIU,MAAJ,EAAY;UACV,IAAI,CAACH,OAAO,CAACI,WAAb,EAA0B;YACxB;YACA;UACD;UACD,IAAMC,OAAO,GAAG,CAAA,CAAA,EAAA,mBAAA,WAAA,EACdL,OAAO,CAACI,WADM,EAEdD,MAFc,EAGdN,KAHc,EAId,IAJc,EAKdG,OAAO,CAACL,QAARK,KAAqB,KAArBA,GAA6B,EAA7BA,GAAkCL,QALpB,CAAhB;UAOAF,MAAM,GAAGY,OAAO,CAACC,iBAARD,CAA0BE,QAAnCd;UACAe,MAAM,CAACC,MAAPD,CAAcX,KAAdW,EAAqBH,OAAO,CAACC,iBAARD,CAA0BR,KAA/CW,CAAAA;UAEA,IAAId,KAAK,CAACK,QAANL,CAAe,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EAAwBD,MAAxB,CAAfC,CAAJ,EAAqD;YACnD;YACA;YACA;UACD,CAED;UACA,IAAMgB,YAAY,GAAGZ,WAAW,CAACL,MAAD,CAAhC;UAEA,IAAIiB,YAAY,KAAKjB,MAAjBiB,IAA2BhB,KAAK,CAACK,QAANL,CAAegB,YAAfhB,CAA/B,EAA6D;YAC3D;UACD;QACF;MACF;IACF,SAAA,GAAA;MAAA,SAAA,CAAA,CAAA,CAAA,GAAA;IAAA;MAAA,SAAA,CAAA,CAAA;IAAA;EAAA;EACD,OAAOD,MAAP;AACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  basePath: string,\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string\n) {\n  if (!pages.includes(asPath)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(asPath)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true,\n          rewrite.basePath === false ? '' : basePath\n        )\n        asPath = destRes.parsedDestination.pathname!\n        Object.assign(query, destRes.parsedDestination.query)\n\n        if (pages.includes(removePathTrailingSlash(asPath))) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        const resolvedHref = resolveHref(asPath)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          break\n        }\n      }\n    }\n  }\n  return asPath\n}\n"]},"metadata":{},"sourceType":"script"}